package week04.BOJ_S3_2606_Î∞îÏù¥Îü¨Ïä§;

/* ================================================================
 *
 * Problem  : Î∞îÏù¥Îü¨Ïä§_S3
 * Author   : ÍπÄÌòúÏßÄ
 * Date     : 2025ÎÖÑ 05Ïõî 07Ïùº
 *
 * ================================================================
 * üìå Î¨∏Ï†ú Î∂ÑÏÑù ÏöîÏïΩ
 * - 1Î≤à Ïª¥Ìì®ÌÑ∞Ïóê Ïõú Î∞îÏù¥Îü¨Ïä§Í∞Ä Í±∏Î¶∞ ÏÉÅÌÉúÎ°ú, 1Î≤à Ïª¥Ìì®ÌÑ∞Î•º ÌÜµÌï¥ Í∞êÏóºÎêòÎäî Ïª¥Ìì®ÌÑ∞Ïùò Ïàò Íµ¨ÌïòÍ∏∞
 *
 * # ÏûÖÎ†•
 * - 1Ìñâ : Ïª¥Ìì®ÌÑ∞Ïùò Ïàò
 * - 2Ìñâ : Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎäî Ïª¥Ìì®ÌÑ∞ ÏåçÏùò Ïàò
 * - 3Ìñâ~ : Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎäî Ïª¥Ìì®ÌÑ∞ Ïåç
 *
 * # Ï∂úÎ†•
 * - Î∞îÏù¥Îü¨Ïä§Ïóê Í±∏Î¶¨Í≤å ÎêòÎäî Ïª¥Ìì®ÌÑ∞Ïùò Ïàò Ï∂úÎ†•
 *
 * üíª ÏïåÍ≥†Î¶¨Ï¶ò ÏÑ§Í≥Ñ
 * 1. HashMapÏùÑ Ïù¥Ïö©ÌïòÏó¨ Ïª¥Ìì®Ìì®ÌÑ∞ Ïåç(Í∞ÑÏÑ†)Ïùò Ï†ïÎ≥¥Î•º Ïù∏Ï†ë Î¶¨Ïä§Ìä∏Î°ú Î≥ÄÌôòÌïúÎã§.
 * 2. DFSÎ•º Ïù¥Ïö©ÌïòÏó¨ ÏãúÏûë ÎÖ∏Îìú(1)Î∂ÄÌÑ∞ ÏãúÏûëÌïòÏó¨ Î∞©Î¨∏ÌïòÏßÄ ÏïäÏùÄ Îã§Ïùå ÎÖ∏ÎìúÎ•º Ï∞æÎäîÎã§.
 *    -> Ïù¥Îïå ÏïÑÏßÅ Î∞©Î¨∏ÌïòÏßÄ ÏïäÏùÄ ÎÖ∏ÎìúÎ•º Ï∞æÏïòÏùÑ Í≤ΩÏö∞ countÏóê 1ÏùÑ ÎçîÌïúÎã§.
 * 3. countÎ•º Ï∂úÎ†•ÌïúÎã§.
 *
 * ‚è∞ ÏãúÍ∞ÑÎ≥µÏû°ÎèÑ
 * - O(N + M)
 * -> N - Ï†ïÏ†êÏùò Ïàò
 * -> M - Í∞ÑÏÑ†Ïùò Ïàò
 * ================================================================
 */

import java.io.*;
import java.util.*;

public class Hye {
    public static int count = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int computer = Integer.parseInt(br.readLine());

        int connect = Integer.parseInt(br.readLine());

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for(int i=1; i<= computer; i++){
            graph.put(i, new ArrayList<>());
        }

        for(int i=0; i<connect; i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            graph.get(a).add(b);
            graph.get(b).add(a);
        }

        Set<Integer> visited = new HashSet<>();

        dfs(graph, visited, 1);

        bw.write(count + "");
        bw.flush();
        bw.close();

        br.close();

    }

    public static void dfs(Map<Integer, List<Integer>> graph, Set<Integer> visited, int curVertex){
        visited.add(curVertex);

        for(int nextVertex : graph.get(curVertex)){
            if(!visited.contains(nextVertex)){
                count++;
                dfs(graph, visited, nextVertex);
            }
        }
    }
}
